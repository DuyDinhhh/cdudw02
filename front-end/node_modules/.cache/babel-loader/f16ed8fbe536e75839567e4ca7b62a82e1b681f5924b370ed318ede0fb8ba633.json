{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from \"react\";\n\n// const UserContext = createContext(); // ✅ Make sure it's properly initialized\n\n// const UserProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n//   const [count, setCount] = useState(0);\n//   const [user, setUser] = useState(null);\n\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem(\"user\");\n//     if (storedUser) {\n//       setUser(JSON.parse(storedUser).data);\n//     }\n//   }, []);\n//   // Load cart from sessionStorage on app start\n//   useEffect(() => {\n//     const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n//     setCart(storedCart);\n//     setCount(storedCart.length);\n//   }, []);\n\n//   // Function to add product to cart\n//   const addCart = (product) => {\n//     let updatedCart = [...cart];\n//     const existingProduct = updatedCart.find((item) => item.id === product.id);\n\n//     if (existingProduct) {\n//       existingProduct.quantity += 1; // ✅ Increase quantity if exists\n//     } else {\n//       updatedCart.push({ ...product, quantity: 1 }); // ✅ Add new product\n//     }\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n\n//   const removeCart = (id) => {\n//     const updatedCart = cart.filter((item) => item.id !== id);\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n//   const updateCartQuantity = (id, quantity) => {\n//     const updatedCart = cart.map((item) =>\n//       item.id === id ? { ...item, quantity: quantity } : item\n//     );\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//   };\n//   return (\n//     <UserContext.Provider\n//       value={{ user, cart, count, addCart, removeCart, updateCartQuantity }}\n//     >\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export { UserContext, UserProvider };\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { GET_CART, ADD_TO_CART, REMOVE_FROM_CART, PLACE_ORDER } from \"../api/apiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [cart, setCart] = useState([]);\n  const navigate = useNavigate();\n\n  // ✅ Load user from localStorage\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (storedUser) setUser(storedUser.data);\n  }, []);\n\n  // ✅ Fetch Cart Data After Login\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.id) {\n      GET_CART().then(response => {\n        if (response) {\n          setCart(response);\n        }\n      });\n    }\n  }, [user === null || user === void 0 ? void 0 : user.id]);\n\n  // ✅ Function to Place Order\n  const placeOrder = () => {\n    if (!(user !== null && user !== void 0 && user.id)) {\n      alert(\"Bạn cần đăng nhập để đặt hàng!\");\n      navigate(\"/login\");\n      return;\n    }\n    PLACE_ORDER(user.id).then(() => {\n      setCart([]); // ✅ Clear cart after placing order\n      alert(\"Đặt hàng thành công!\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      cart,\n      placeOrder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"QgWbFBE+QDBgmcF02gF2RmXeWb4=\", false, function () {\n  return [useNavigate];\n});\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","PLACE_ORDER","useNavigate","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","cart","setCart","navigate","storedUser","JSON","parse","localStorage","getItem","data","id","then","response","placeOrder","alert","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\n\n// const UserContext = createContext(); // ✅ Make sure it's properly initialized\n\n// const UserProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n//   const [count, setCount] = useState(0);\n//   const [user, setUser] = useState(null);\n\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem(\"user\");\n//     if (storedUser) {\n//       setUser(JSON.parse(storedUser).data);\n//     }\n//   }, []);\n//   // Load cart from sessionStorage on app start\n//   useEffect(() => {\n//     const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n//     setCart(storedCart);\n//     setCount(storedCart.length);\n//   }, []);\n\n//   // Function to add product to cart\n//   const addCart = (product) => {\n//     let updatedCart = [...cart];\n//     const existingProduct = updatedCart.find((item) => item.id === product.id);\n\n//     if (existingProduct) {\n//       existingProduct.quantity += 1; // ✅ Increase quantity if exists\n//     } else {\n//       updatedCart.push({ ...product, quantity: 1 }); // ✅ Add new product\n//     }\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n\n//   const removeCart = (id) => {\n//     const updatedCart = cart.filter((item) => item.id !== id);\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n//   const updateCartQuantity = (id, quantity) => {\n//     const updatedCart = cart.map((item) =>\n//       item.id === id ? { ...item, quantity: quantity } : item\n//     );\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//   };\n//   return (\n//     <UserContext.Provider\n//       value={{ user, cart, count, addCart, removeCart, updateCartQuantity }}\n//     >\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export { UserContext, UserProvider };\nimport React, { createContext, useState, useEffect } from \"react\";\nimport {\n  GET_CART,\n  ADD_TO_CART,\n  REMOVE_FROM_CART,\n  PLACE_ORDER,\n} from \"../api/apiService\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [cart, setCart] = useState([]);\n  const navigate = useNavigate();\n\n  // ✅ Load user from localStorage\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (storedUser) setUser(storedUser.data);\n  }, []);\n\n  // ✅ Fetch Cart Data After Login\n  useEffect(() => {\n    if (user?.id) {\n      GET_CART().then((response) => {\n        if (response) {\n          setCart(response);\n        }\n      });\n    }\n  }, [user?.id]);\n\n  // ✅ Function to Place Order\n  const placeOrder = () => {\n    if (!user?.id) {\n      alert(\"Bạn cần đăng nhập để đặt hàng!\");\n      navigate(\"/login\");\n      return;\n    }\n\n    PLACE_ORDER(user.id).then(() => {\n      setCart([]); // ✅ Clear cart after placing order\n      alert(\"Đặt hàng thành công!\");\n    });\n  };\n\n  return (\n    <UserContext.Provider value={{ user, cart, placeOrder }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport { UserContext, UserProvider };\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SACEC,QAAQ,EACRC,WAAW,EACXC,gBAAgB,EAChBC,WAAW,QACN,mBAAmB;AAC1B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAEnC,MAAMW,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMiB,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACAL,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3D,IAAIJ,UAAU,EAAEJ,OAAO,CAACI,UAAU,CAACK,IAAI,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAtB,SAAS,CAAC,MAAM;IACd,IAAIY,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEW,EAAE,EAAE;MACZtB,QAAQ,CAAC,CAAC,CAACuB,IAAI,CAAEC,QAAQ,IAAK;QAC5B,IAAIA,QAAQ,EAAE;UACZV,OAAO,CAACU,QAAQ,CAAC;QACnB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,EAAE,CAAC,CAAC;;EAEd;EACA,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,EAACd,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEW,EAAE,GAAE;MACbI,KAAK,CAAC,gCAAgC,CAAC;MACvCX,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACF;IAEAZ,WAAW,CAACQ,IAAI,CAACW,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM;MAC9BT,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACbY,KAAK,CAAC,sBAAsB,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;EAED,oBACEpB,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,IAAI;MAAEE,IAAI;MAAEY;IAAW,CAAE;IAAAhB,QAAA,EACrDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACtB,EAAA,CAzCIF,YAAY;EAAA,QAGCJ,WAAW;AAAA;AAAA6B,EAAA,GAHxBzB,YAAY;AA2ClB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
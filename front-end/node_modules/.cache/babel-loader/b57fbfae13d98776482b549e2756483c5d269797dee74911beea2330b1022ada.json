{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from \"react\";\n\n// const UserContext = createContext(); // ✅ Make sure it's properly initialized\n\n// const UserProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n//   const [count, setCount] = useState(0);\n//   const [user, setUser] = useState(null);\n\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem(\"user\");\n//     if (storedUser) {\n//       setUser(JSON.parse(storedUser).data);\n//     }\n//   }, []);\n//   // Load cart from sessionStorage on app start\n//   useEffect(() => {\n//     const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n//     setCart(storedCart);\n//     setCount(storedCart.length);\n//   }, []);\n\n//   // Function to add product to cart\n//   const addCart = (product) => {\n//     let updatedCart = [...cart];\n//     const existingProduct = updatedCart.find((item) => item.id === product.id);\n\n//     if (existingProduct) {\n//       existingProduct.quantity += 1; // ✅ Increase quantity if exists\n//     } else {\n//       updatedCart.push({ ...product, quantity: 1 }); // ✅ Add new product\n//     }\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n\n//   const removeCart = (id) => {\n//     const updatedCart = cart.filter((item) => item.id !== id);\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n//   const updateCartQuantity = (id, quantity) => {\n//     const updatedCart = cart.map((item) =>\n//       item.id === id ? { ...item, quantity: quantity } : item\n//     );\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//   };\n//   return (\n//     <UserContext.Provider\n//       value={{ user, cart, count, addCart, removeCart, updateCartQuantity }}\n//     >\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export { UserContext, UserProvider };\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { GET_CART, ADD_TO_CART, REMOVE_FROM_CART } from \"../api/apiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [cart, setCart] = useState([]);\n\n  // ✅ Load user from localStorage\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (storedUser) setUser(storedUser.data);\n  }, []);\n\n  // ✅ Fetch Cart Data After Login\n  useEffect(() => {\n    if (user !== null && user !== void 0 && user.id) {\n      GET_CART(user.id).then(response => {\n        if (response) {\n          setCart(response);\n          console.log(response);\n        }\n      });\n    }\n  }, [user === null || user === void 0 ? void 0 : user.id]);\n\n  //   const addCart = (product, quantity) => {\n  //     const cartId = localStorage.getItem(\"cartId\");\n  //     if (!cartId) {\n  //       alert(\"Không tìm thấy giỏ hàng! Vui lòng đăng nhập.\");\n  //       return;\n  //     }\n\n  //     const existingItem = cart.find((item) => item.product.id === product.id);\n  //     if (existingItem) {\n  //       // Send the full new quantity, not adding to existing\n  //       ADD_TO_CART(product.id, cartId, quantity).then(() => {\n  //         setCart(\n  //           cart.map((item) =>\n  //             item.product.id === product.id\n  //               ? { ...item, quantity: quantity }\n  //               : item\n  //           )\n  //         );\n  //       });\n  //     } else {\n  //       ADD_TO_CART(product.id, cartId, quantity).then(() => {\n  //         setCart([...cart, { product, quantity }]);\n  //       });\n  //     }\n  //   };\n  // ✅ Function to Remove Item from Cart\n  const addCart = (product, quantity = 1) => {\n    const cartId = localStorage.getItem(\"cartId\");\n    if (!cartId) {\n      alert(\"Không tìm thấy giỏ hàng! Vui lòng đăng nhập.\");\n      return;\n    }\n    const existingItem = cart.find(item => item.product.id === product.id);\n    const finalQuantity = existingItem ? existingItem.quantity + quantity : quantity;\n    ADD_TO_CART(product.id, cartId, finalQuantity).then(() => {\n      if (existingItem) {\n        setCart(cart.map(item => item.product.id === product.id ? {\n          ...item,\n          quantity: finalQuantity\n        } : item));\n      } else {\n        setCart([...cart, {\n          product,\n          quantity: finalQuantity\n        }]);\n      }\n    });\n  };\n  const removeCart = productId => {\n    const cartId = localStorage.getItem(\"cartId\");\n    REMOVE_FROM_CART(cartId, productId).then(() => {\n      setCart(cart.filter(item => item.product.id !== productId));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      cart,\n      addCart,\n      removeCart,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"JuqRMSFLGzUbNF0XrKzQTNniOzE=\");\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","GET_CART","ADD_TO_CART","REMOVE_FROM_CART","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","cart","setCart","storedUser","JSON","parse","localStorage","getItem","data","id","then","response","console","log","addCart","product","quantity","cartId","alert","existingItem","find","item","finalQuantity","map","removeCart","productId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\n\n// const UserContext = createContext(); // ✅ Make sure it's properly initialized\n\n// const UserProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n//   const [count, setCount] = useState(0);\n//   const [user, setUser] = useState(null);\n\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem(\"user\");\n//     if (storedUser) {\n//       setUser(JSON.parse(storedUser).data);\n//     }\n//   }, []);\n//   // Load cart from sessionStorage on app start\n//   useEffect(() => {\n//     const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n//     setCart(storedCart);\n//     setCount(storedCart.length);\n//   }, []);\n\n//   // Function to add product to cart\n//   const addCart = (product) => {\n//     let updatedCart = [...cart];\n//     const existingProduct = updatedCart.find((item) => item.id === product.id);\n\n//     if (existingProduct) {\n//       existingProduct.quantity += 1; // ✅ Increase quantity if exists\n//     } else {\n//       updatedCart.push({ ...product, quantity: 1 }); // ✅ Add new product\n//     }\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n\n//   const removeCart = (id) => {\n//     const updatedCart = cart.filter((item) => item.id !== id);\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//     setCount(updatedCart.length);\n//   };\n//   const updateCartQuantity = (id, quantity) => {\n//     const updatedCart = cart.map((item) =>\n//       item.id === id ? { ...item, quantity: quantity } : item\n//     );\n\n//     sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n//     setCart(updatedCart);\n//   };\n//   return (\n//     <UserContext.Provider\n//       value={{ user, cart, count, addCart, removeCart, updateCartQuantity }}\n//     >\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };\n\n// export { UserContext, UserProvider };\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { GET_CART, ADD_TO_CART, REMOVE_FROM_CART } from \"../api/apiService\";\n\nconst UserContext = createContext();\n\nconst UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [cart, setCart] = useState([]);\n\n  // ✅ Load user from localStorage\n  useEffect(() => {\n    const storedUser = JSON.parse(localStorage.getItem(\"user\"));\n    if (storedUser) setUser(storedUser.data);\n  }, []);\n\n  // ✅ Fetch Cart Data After Login\n  useEffect(() => {\n    if (user?.id) {\n      GET_CART(user.id).then((response) => {\n        if (response) {\n          setCart(response);\n          console.log(response);\n        }\n      });\n    }\n  }, [user?.id]);\n\n  //   const addCart = (product, quantity) => {\n  //     const cartId = localStorage.getItem(\"cartId\");\n  //     if (!cartId) {\n  //       alert(\"Không tìm thấy giỏ hàng! Vui lòng đăng nhập.\");\n  //       return;\n  //     }\n\n  //     const existingItem = cart.find((item) => item.product.id === product.id);\n  //     if (existingItem) {\n  //       // Send the full new quantity, not adding to existing\n  //       ADD_TO_CART(product.id, cartId, quantity).then(() => {\n  //         setCart(\n  //           cart.map((item) =>\n  //             item.product.id === product.id\n  //               ? { ...item, quantity: quantity }\n  //               : item\n  //           )\n  //         );\n  //       });\n  //     } else {\n  //       ADD_TO_CART(product.id, cartId, quantity).then(() => {\n  //         setCart([...cart, { product, quantity }]);\n  //       });\n  //     }\n  //   };\n  // ✅ Function to Remove Item from Cart\n  const addCart = (product, quantity = 1) => {\n    const cartId = localStorage.getItem(\"cartId\");\n    if (!cartId) {\n      alert(\"Không tìm thấy giỏ hàng! Vui lòng đăng nhập.\");\n      return;\n    }\n\n    const existingItem = cart.find((item) => item.product.id === product.id);\n    const finalQuantity = existingItem\n      ? existingItem.quantity + quantity\n      : quantity;\n\n    ADD_TO_CART(product.id, cartId, finalQuantity).then(() => {\n      if (existingItem) {\n        setCart(\n          cart.map((item) =>\n            item.product.id === product.id\n              ? { ...item, quantity: finalQuantity }\n              : item\n          )\n        );\n      } else {\n        setCart([...cart, { product, quantity: finalQuantity }]);\n      }\n    });\n  };\n  const removeCart = (productId) => {\n    const cartId = localStorage.getItem(\"cartId\");\n    REMOVE_FROM_CART(cartId, productId).then(() => {\n      setCart(cart.filter((item) => item.product.id !== productId));\n    });\n  };\n\n  return (\n    <UserContext.Provider value={{ user, cart, addCart, removeCart, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport { UserContext, UserProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
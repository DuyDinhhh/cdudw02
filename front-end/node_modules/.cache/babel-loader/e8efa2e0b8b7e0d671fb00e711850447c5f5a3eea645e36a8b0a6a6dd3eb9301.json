{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext(); // ✅ Make sure it's properly initialized\n\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n  const [count, setCount] = useState(0);\n  const [user, setUser] = useState({\n    email: \"\",\n    id: \"\",\n    author: false\n  });\n\n  // Load cart from sessionStorage on app start\n  useEffect(() => {\n    const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n    setCart(storedCart);\n    setCount(storedCart.length);\n  }, []);\n\n  // Function to add product to cart\n  const addCart = product => {\n    let updatedCart = [...cart];\n    const existingProduct = updatedCart.find(item => item.id === product.id);\n    if (existingProduct) {\n      existingProduct.quantity += 1; // ✅ Increase quantity if exists\n    } else {\n      updatedCart.push({\n        ...product,\n        quantity: 1\n      }); // ✅ Add new product\n    }\n    sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n    setCart(updatedCart);\n    setCount(updatedCart.length);\n  };\n  const removeCart = id => {\n    const updatedCart = cart.filter(item => item.id !== id);\n    sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n    setCart(updatedCart);\n    setCount(updatedCart.length);\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      cart,\n      count,\n      addCart,\n      removeCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"EcXAL1HJa9bAG7i8Vy1I8tooz2c=\");\n_c = UserProvider;\nexport { UserContext, UserProvider };\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","cart","setCart","count","setCount","user","setUser","email","id","author","storedCart","JSON","parse","sessionStorage","getItem","length","addCart","product","updatedCart","existingProduct","find","item","quantity","push","setItem","stringify","removeCart","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nguyentadinhduy/Documents/CAODANGCONGTHUONG/web02/front-end/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nconst UserContext = createContext(); // ✅ Make sure it's properly initialized\n\nconst UserProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n  const [count, setCount] = useState(0);\n  const [user, setUser] = useState({ email: \"\", id: \"\", author: false });\n\n  // Load cart from sessionStorage on app start\n  useEffect(() => {\n    const storedCart = JSON.parse(sessionStorage.getItem(\"arrayProduct\")) || [];\n    setCart(storedCart);\n    setCount(storedCart.length);\n  }, []);\n\n  // Function to add product to cart\n  const addCart = (product) => {\n    let updatedCart = [...cart];\n    const existingProduct = updatedCart.find((item) => item.id === product.id);\n\n    if (existingProduct) {\n      existingProduct.quantity += 1; // ✅ Increase quantity if exists\n    } else {\n      updatedCart.push({ ...product, quantity: 1 }); // ✅ Add new product\n    }\n\n    sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n    setCart(updatedCart);\n    setCount(updatedCart.length);\n  };\n\n  const removeCart = (id) => {\n    const updatedCart = cart.filter((item) => item.id !== id);\n    sessionStorage.setItem(\"arrayProduct\", JSON.stringify(updatedCart));\n    setCart(updatedCart);\n    setCount(updatedCart.length);\n  };\n  return (\n    <UserContext.Provider value={{ user, cart, count, addCart, removeCart }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport { UserContext, UserProvider };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC,CAAC,CAAC;;AAErC,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAAEc,KAAK,EAAE,EAAE;IAAEC,EAAE,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAM,CAAC,CAAC;;EAEtE;EACAf,SAAS,CAAC,MAAM;IACd,MAAMgB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE;IAC3EZ,OAAO,CAACQ,UAAU,CAAC;IACnBN,QAAQ,CAACM,UAAU,CAACK,MAAM,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAIC,OAAO,IAAK;IAC3B,IAAIC,WAAW,GAAG,CAAC,GAAGjB,IAAI,CAAC;IAC3B,MAAMkB,eAAe,GAAGD,WAAW,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACb,EAAE,KAAKS,OAAO,CAACT,EAAE,CAAC;IAE1E,IAAIW,eAAe,EAAE;MACnBA,eAAe,CAACG,QAAQ,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC,MAAM;MACLJ,WAAW,CAACK,IAAI,CAAC;QAAE,GAAGN,OAAO;QAAEK,QAAQ,EAAE;MAAE,CAAC,CAAC,CAAC,CAAC;IACjD;IAEAT,cAAc,CAACW,OAAO,CAAC,cAAc,EAAEb,IAAI,CAACc,SAAS,CAACP,WAAW,CAAC,CAAC;IACnEhB,OAAO,CAACgB,WAAW,CAAC;IACpBd,QAAQ,CAACc,WAAW,CAACH,MAAM,CAAC;EAC9B,CAAC;EAED,MAAMW,UAAU,GAAIlB,EAAE,IAAK;IACzB,MAAMU,WAAW,GAAGjB,IAAI,CAAC0B,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACb,EAAE,KAAKA,EAAE,CAAC;IACzDK,cAAc,CAACW,OAAO,CAAC,cAAc,EAAEb,IAAI,CAACc,SAAS,CAACP,WAAW,CAAC,CAAC;IACnEhB,OAAO,CAACgB,WAAW,CAAC;IACpBd,QAAQ,CAACc,WAAW,CAACH,MAAM,CAAC;EAC9B,CAAC;EACD,oBACEnB,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAExB,IAAI;MAAEJ,IAAI;MAAEE,KAAK;MAAEa,OAAO;MAAEU;IAAW,CAAE;IAAA3B,QAAA,EACrEA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjC,EAAA,CAvCIF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAyClB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}